{"version":3,"sources":["DrawerItem.tsx"],"names":["LinkPressable","children","style","onPress","onLongPress","to","accessibilityRole","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","borderRadius","StyleSheet","flatten","color","backgroundColor","iconNode","size","container","wrapper","selected","marginLeft","marginVertical","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"mappings":"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","sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\r\nimport { Link, useTheme } from '@react-navigation/native';\r\nimport Color from 'color';\r\nimport * as React from 'react';\r\nimport {\r\n  Platform,\r\n  StyleProp,\r\n  StyleSheet,\r\n  Text,\r\n  TextStyle,\r\n  View,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\ntype Props = {\r\n  /**\r\n   * The label text of the item.\r\n   */\r\n  label:\r\n    | string\r\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\r\n  /**\r\n   * Icon to display for the `DrawerItem`.\r\n   */\r\n  icon?: (props: {\r\n    focused: boolean;\r\n    size: number;\r\n    color: string;\r\n  }) => React.ReactNode;\r\n  /**\r\n   * URL to use for the link to the tab.\r\n   */\r\n  to?: string;\r\n  /**\r\n   * Whether to highlight the drawer item as active.\r\n   */\r\n  focused?: boolean;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress: () => void;\r\n  /**\r\n   * Color for the icon and label when the item is active.\r\n   */\r\n  activeTintColor?: string;\r\n  /**\r\n   * Color for the icon and label when the item is inactive.\r\n   */\r\n  inactiveTintColor?: string;\r\n  /**\r\n   * Background color for item when its active.\r\n   */\r\n  activeBackgroundColor?: string;\r\n  /**\r\n   * Background color for item when its inactive.\r\n   */\r\n  inactiveBackgroundColor?: string;\r\n  /**\r\n   * Color of the touchable effect on press.\r\n   * Only supported on Android.\r\n   *\r\n   * @platform android\r\n   */\r\n  pressColor?: string;\r\n  /**\r\n   * Opacity of the touchable effect on press.\r\n   * Only supported on iOS.\r\n   *\r\n   * @platform ios\r\n   */\r\n  pressOpacity?: number;\r\n  /**\r\n   * Style object for the label element.\r\n   */\r\n  labelStyle?: StyleProp<TextStyle>;\r\n  /**\r\n   * Style object for the wrapper element.\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n  /**\r\n   * Whether label font should scale to respect Text Size accessibility settings.\r\n   */\r\n  allowFontScaling?: boolean;\r\n};\r\n\r\nconst LinkPressable = ({\r\n  children,\r\n  style,\r\n  onPress,\r\n  onLongPress,\r\n  to,\r\n  accessibilityRole,\r\n  ...rest\r\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\r\n  style: StyleProp<ViewStyle>;\r\n} & {\r\n  to?: string;\r\n  children: React.ReactNode;\r\n  onPress?: () => void;\r\n}) => {\r\n  if (Platform.OS === 'web' && to) {\r\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\r\n    // We need to use `onClick` to be able to prevent default browser handling of links.\r\n    return (\r\n      <Link\r\n        {...rest}\r\n        to={to}\r\n        style={[styles.button, style]}\r\n        onPress={(e: any) => {\r\n          if (\r\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\r\n            (e.button == null || e.button === 0) // ignore everything but left clicks\r\n          ) {\r\n            e.preventDefault();\r\n            onPress?.(e);\r\n          }\r\n        }}\r\n        onLongPress={onLongPress ?? undefined}\r\n      >\r\n        {children}\r\n      </Link>\r\n    );\r\n  } else {\r\n    return (\r\n      <PlatformPressable\r\n        {...rest}\r\n        accessibilityRole={accessibilityRole}\r\n        onPress={onPress}\r\n      >\r\n        <View style={style}>{children}</View>\r\n      </PlatformPressable>\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * A component used to show an action item with an icon and a label in a navigation drawer.\r\n */\r\nexport default function DrawerItem(props: Props) {\r\n  const { colors } = useTheme();\r\n\r\n  const {\r\n    icon,\r\n    label,\r\n    labelStyle,\r\n    to,\r\n    focused = false,\r\n    allowFontScaling,\r\n    activeTintColor = colors.primary,\r\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\r\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\r\n    inactiveBackgroundColor = 'transparent',\r\n    style,\r\n    onPress,\r\n    pressColor,\r\n    pressOpacity,\r\n    ...rest\r\n  } = props;\r\n\r\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\r\n  const color = focused ? activeTintColor : inactiveTintColor;\r\n  const backgroundColor = focused\r\n    ? activeBackgroundColor\r\n    : inactiveBackgroundColor;\r\n\r\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\r\n\r\n  return (\r\n    <View\r\n      collapsable={false}\r\n      {...rest}\r\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\r\n    >\r\n      <LinkPressable\r\n        onPress={onPress}\r\n        style={[styles.wrapper, { borderRadius }]}\r\n        accessibilityRole=\"button\"\r\n        accessibilityState={{ selected: focused }}\r\n        pressColor={pressColor}\r\n        pressOpacity={pressOpacity}\r\n        to={to}\r\n      >\r\n        <React.Fragment>\r\n          {iconNode}\r\n          <View\r\n            style={[\r\n              styles.label,\r\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\r\n            ]}\r\n          >\r\n            {typeof label === 'string' ? (\r\n              <Text\r\n                numberOfLines={1}\r\n                allowFontScaling={allowFontScaling}\r\n                style={[\r\n                  {\r\n                    color,\r\n                    fontWeight: '500',\r\n                  },\r\n                  labelStyle,\r\n                ]}\r\n              >\r\n                {label}\r\n              </Text>\r\n            ) : (\r\n              label({ color, focused })\r\n            )}\r\n          </View>\r\n        </React.Fragment>\r\n      </LinkPressable>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginHorizontal: 10,\r\n    marginVertical: 4,\r\n    overflow: 'hidden',\r\n  },\r\n  wrapper: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: 8,\r\n  },\r\n  label: {\r\n    marginRight: 32,\r\n    flex: 1,\r\n  },\r\n  button: {\r\n    display: 'flex',\r\n  },\r\n});\r\n"]}