{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["DrawerNavigator","initialRouteName","defaultStatus","customDefaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent","DrawerRouter"],"mappings":";;;;;;;AAAA;;AAWA;;AACA;;AAOA;;;;;;;;;;AAWA,SAASA,eAAT,OAQU;AAAA,MARe;AACvBC,IAAAA,gBADuB;AAEvBC,IAAAA,aAAa,EAAEC,mBAFQ;AAGvBC,IAAAA,YAHuB;AAIvBC,IAAAA,QAJuB;AAKvBC,IAAAA,eALuB;AAMvBC,IAAAA,aANuB;AAOvB,OAAGC;AAPoB,GAQf;AACR,QAAM;AACJ;AACAC,IAAAA,aAFI;AAGJ;AACAC,IAAAA,IAJI;AAKJ;AACAC,IAAAA,oBANI;AAOJ,OAAGC;AAPC,MAQFJ,kBARJ;AAUA,MAAIK,oBAA6C,GAAG,EAApD;;AAEA,MAAIF,oBAAJ,EAA0B;AACxBG,IAAAA,MAAM,CAACC,MAAP,CAAcF,oBAAd,EAAoC;AAClCG,MAAAA,cAAc,EAAEL,oBAAoB,CAACK,cADH;AAElCC,MAAAA,UAAU,EAAEN,oBAAoB,CAACM,UAFC;AAGlCC,MAAAA,cAAc,EAAEP,oBAAoB,CAACQ,SAHH;AAIlCC,MAAAA,yBAAyB,EAAET,oBAAoB,CAACU,aAJd;AAKlCC,MAAAA,mBAAmB,EAAEX,oBAAoB,CAACW,mBALR;AAMlCC,MAAAA,gBAAgB,EAAEZ,oBAAoB,CAACa,gBANL;AAOlCC,MAAAA,YAAY,EAAEd,oBAAoB,CAACc,YAPD;AAQlCC,MAAAA,wBAAwB,EAAEf,oBAAoB,CAACgB,kBARb;AASlCC,MAAAA,mBAAmB,EAAEjB,oBAAoB,CAACiB;AATR,KAApC;AAaEd,IAAAA,MAAM,CAACe,IAAP,CAAYhB,oBAAZ,CADF,CAEEiB,OAFF,CAEWC,GAAD,IAAS;AACjB,UAAIlB,oBAAoB,CAACkB,GAAD,CAApB,KAA8BC,SAAlC,EAA6C;AAC3C;AACA,eAAOnB,oBAAoB,CAACkB,GAAD,CAA3B;AACD;AACF,KAPD;AASA,2BACEpB,oBADF,EAEG,+LAA8LsB,IAAI,CAACC,SAAL,CAC7LrB,oBAD6L,EAE7L,IAF6L,EAG7L,CAH6L,CAI7L,qFANJ;AAQD;;AAED,MAAI,OAAOH,IAAP,KAAgB,SAApB,EAA+B;AAC7BG,IAAAA,oBAAoB,CAACH,IAArB,GAA4BA,IAA5B;AAEA,2BACE,IADF,EAEG,uKAFH;AAID;;AAED,MAAI,OAAOD,aAAP,KAAyB,SAA7B,EAAwC;AACtC,2BACE,IADF,EAEG,0MAFH;AAID;;AAED,QAAMP,aAA2B,GAC/BC,mBAAmB,KAAK6B,SAAxB,GACI7B,mBADJ,GAEIM,aAAa,GACb,MADa,GAEb,QALN;AAOA,QAAM;AAAE0B,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA,UAAtB;AAAkCC,IAAAA;AAAlC,MACJ,kCAMEC,oBANF,EAMgB;AACdtC,IAAAA,gBADc;AAEdC,IAAAA,aAFc;AAGdE,IAAAA,YAHc;AAIdC,IAAAA,QAJc;AAKdC,IAAAA,eALc;AAMdC,IAAAA,aANc;AAOdM,IAAAA;AAPc,GANhB,CADF;AAiBA,sBACE,oBAAC,iBAAD,qBACE,oBAAC,mBAAD,eACMD,IADN;AAEE,IAAA,aAAa,EAAEV,aAFjB;AAGE,IAAA,KAAK,EAAEiC,KAHT;AAIE,IAAA,WAAW,EAAEC,WAJf;AAKE,IAAA,UAAU,EAAEC;AALd,KADF,CADF;AAWD;;eAEc,oCAKbrC,eALa,C","sourcesContent":["import {\r\n  createNavigatorFactory,\r\n  DefaultNavigatorOptions,\r\n  DrawerActionHelpers,\r\n  DrawerNavigationState,\r\n  DrawerRouter,\r\n  DrawerRouterOptions,\r\n  DrawerStatus,\r\n  ParamListBase,\r\n  useNavigationBuilder,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\nimport warnOnce from 'warn-once';\r\n\r\nimport type {\r\n  DrawerNavigationConfig,\r\n  DrawerNavigationEventMap,\r\n  DrawerNavigationOptions,\r\n} from '../types';\r\nimport DrawerView from '../views/DrawerView';\r\n\r\ntype Props = DefaultNavigatorOptions<\r\n  ParamListBase,\r\n  DrawerNavigationState<ParamListBase>,\r\n  DrawerNavigationOptions,\r\n  DrawerNavigationEventMap\r\n> &\r\n  DrawerRouterOptions &\r\n  DrawerNavigationConfig;\r\n\r\nfunction DrawerNavigator({\r\n  initialRouteName,\r\n  defaultStatus: customDefaultStatus,\r\n  backBehavior,\r\n  children,\r\n  screenListeners,\r\n  screenOptions,\r\n  ...restWithDeprecated\r\n}: Props) {\r\n  const {\r\n    // @ts-expect-error: openByDefault is deprecated\r\n    openByDefault,\r\n    // @ts-expect-error: lazy is deprecated\r\n    lazy,\r\n    // @ts-expect-error: drawerContentOptions is deprecated\r\n    drawerContentOptions,\r\n    ...rest\r\n  } = restWithDeprecated;\r\n\r\n  let defaultScreenOptions: DrawerNavigationOptions = {};\r\n\r\n  if (drawerContentOptions) {\r\n    Object.assign(defaultScreenOptions, {\r\n      drawerPosition: drawerContentOptions.drawerPosition,\r\n      drawerType: drawerContentOptions.drawerType,\r\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\r\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\r\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\r\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\r\n      overlayColor: drawerContentOptions.overlayColor,\r\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\r\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\r\n    });\r\n\r\n    (\r\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\r\n    ).forEach((key) => {\r\n      if (defaultScreenOptions[key] === undefined) {\r\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n        delete defaultScreenOptions[key];\r\n      }\r\n    });\r\n\r\n    warnOnce(\r\n      drawerContentOptions,\r\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\r\n        defaultScreenOptions,\r\n        null,\r\n        2\r\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\r\n    );\r\n  }\r\n\r\n  if (typeof lazy === 'boolean') {\r\n    defaultScreenOptions.lazy = lazy;\r\n\r\n    warnOnce(\r\n      true,\r\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\r\n    );\r\n  }\r\n\r\n  if (typeof openByDefault === 'boolean') {\r\n    warnOnce(\r\n      true,\r\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\r\n    );\r\n  }\r\n\r\n  const defaultStatus: DrawerStatus =\r\n    customDefaultStatus !== undefined\r\n      ? customDefaultStatus\r\n      : openByDefault\r\n      ? 'open'\r\n      : 'closed';\r\n\r\n  const { state, descriptors, navigation, NavigationContent } =\r\n    useNavigationBuilder<\r\n      DrawerNavigationState<ParamListBase>,\r\n      DrawerRouterOptions,\r\n      DrawerActionHelpers<ParamListBase>,\r\n      DrawerNavigationOptions,\r\n      DrawerNavigationEventMap\r\n    >(DrawerRouter, {\r\n      initialRouteName,\r\n      defaultStatus,\r\n      backBehavior,\r\n      children,\r\n      screenListeners,\r\n      screenOptions,\r\n      defaultScreenOptions,\r\n    });\r\n\r\n  return (\r\n    <NavigationContent>\r\n      <DrawerView\r\n        {...rest}\r\n        defaultStatus={defaultStatus}\r\n        state={state}\r\n        descriptors={descriptors}\r\n        navigation={navigation}\r\n      />\r\n    </NavigationContent>\r\n  );\r\n}\r\n\r\nexport default createNavigatorFactory<\r\n  DrawerNavigationState<ParamListBase>,\r\n  DrawerNavigationOptions,\r\n  DrawerNavigationEventMap,\r\n  typeof DrawerNavigator\r\n>(DrawerNavigator);\r\n"]}