{"version":3,"sources":["DrawerView.tsx"],"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","BackHandler","I18nManager","Platform","StyleSheet","View","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","global","nativeCallSyncHook","isConfigured","Drawer","require","default","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","options","loaded","setLoaded","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","addEventListener","document","body","remove","removeEventListener","renderDrawerContent","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","header","layout","name","headerLeft","sceneContainerStyle","absoluteFill","zIndex","headerShown","headerTransparent","headerStatusBarHeight","render","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourcesContent":["import {\r\n  getHeaderTitle,\r\n  Header,\r\n  SafeAreaProviderCompat,\r\n  Screen,\r\n} from '@react-navigation/elements';\r\nimport {\r\n  DrawerActions,\r\n  DrawerNavigationState,\r\n  DrawerStatus,\r\n  ParamListBase,\r\n  useTheme,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\nimport {\r\n  BackHandler,\r\n  I18nManager,\r\n  Platform,\r\n  StyleSheet,\r\n  View,\r\n} from 'react-native';\r\nimport * as Reanimated from 'react-native-reanimated';\r\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\r\n\r\nimport type {\r\n  DrawerContentComponentProps,\r\n  DrawerDescriptorMap,\r\n  DrawerHeaderProps,\r\n  DrawerNavigationConfig,\r\n  DrawerNavigationHelpers,\r\n  DrawerNavigationProp,\r\n  DrawerProps,\r\n} from '../types';\r\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\r\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\r\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\r\nimport DrawerContent from './DrawerContent';\r\nimport DrawerToggleButton from './DrawerToggleButton';\r\nimport { GestureHandlerRootView } from './GestureHandler';\r\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\r\n\r\ntype Props = DrawerNavigationConfig & {\r\n  defaultStatus: DrawerStatus;\r\n  state: DrawerNavigationState<ParamListBase>;\r\n  navigation: DrawerNavigationHelpers;\r\n  descriptors: DrawerDescriptorMap;\r\n};\r\n\r\nconst getDefaultDrawerWidth = ({\r\n  height,\r\n  width,\r\n}: {\r\n  height: number;\r\n  width: number;\r\n}) => {\r\n  /*\r\n   * Default drawer width is screen width - header height\r\n   * with a max width of 280 on mobile and 320 on tablet\r\n   * https://material.io/components/navigation-drawer\r\n   */\r\n  const smallerAxisSize = Math.min(height, width);\r\n  const isLandscape = width > height;\r\n  const isTablet = smallerAxisSize >= 600;\r\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\r\n  const maxWidth = isTablet ? 320 : 280;\r\n\r\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\r\n};\r\n\r\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\r\n\r\nfunction DrawerViewBase({\r\n  state,\r\n  navigation,\r\n  descriptors,\r\n  defaultStatus,\r\n  drawerContent = (props: DrawerContentComponentProps) => (\r\n    <DrawerContent {...props} />\r\n  ),\r\n  detachInactiveScreens = Platform.OS === 'web' ||\r\n    Platform.OS === 'android' ||\r\n    Platform.OS === 'ios',\r\n  // Running in chrome debugger\r\n  // @ts-expect-error\r\n  useLegacyImplementation = !global.nativeCallSyncHook ||\r\n    // Reanimated 2 is not configured\r\n    // @ts-expect-error: the type definitions are incomplete\r\n    !Reanimated.isConfigured?.(),\r\n}: Props) {\r\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\r\n    ? require('./legacy/Drawer').default\r\n    : require('./modern/Drawer').default;\r\n\r\n  const focusedRouteKey = state.routes[state.index].key;\r\n  const {\r\n    drawerHideStatusBarOnOpen = false,\r\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\r\n    drawerStatusBarAnimation = 'slide',\r\n    drawerStyle,\r\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\r\n    gestureHandlerProps,\r\n    keyboardDismissMode = 'on-drag',\r\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\r\n    swipeEdgeWidth = 32,\r\n    swipeEnabled = Platform.OS !== 'web' &&\r\n      Platform.OS !== 'windows' &&\r\n      Platform.OS !== 'macos',\r\n    swipeMinDistance = 60,\r\n  } = descriptors[focusedRouteKey].options;\r\n\r\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\r\n\r\n  if (!loaded.includes(focusedRouteKey)) {\r\n    setLoaded([...loaded, focusedRouteKey]);\r\n  }\r\n\r\n  const dimensions = useSafeAreaFrame();\r\n\r\n  const { colors } = useTheme();\r\n\r\n  const drawerStatus = getDrawerStatusFromState(state);\r\n\r\n  const handleDrawerOpen = React.useCallback(() => {\r\n    navigation.dispatch({\r\n      ...DrawerActions.openDrawer(),\r\n      target: state.key,\r\n    });\r\n  }, [navigation, state.key]);\r\n\r\n  const handleDrawerClose = React.useCallback(() => {\r\n    navigation.dispatch({\r\n      ...DrawerActions.closeDrawer(),\r\n      target: state.key,\r\n    });\r\n  }, [navigation, state.key]);\r\n\r\n  React.useEffect(() => {\r\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\r\n      return;\r\n    }\r\n\r\n    const handleHardwareBack = () => {\r\n      // We shouldn't handle the back button if the parent screen isn't focused\r\n      // This will avoid the drawer overriding event listeners from a focused screen\r\n      if (!navigation.isFocused()) {\r\n        return false;\r\n      }\r\n\r\n      if (defaultStatus === 'open') {\r\n        handleDrawerOpen();\r\n      } else {\r\n        handleDrawerClose();\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') {\r\n        handleHardwareBack();\r\n      }\r\n    };\r\n\r\n    // We only add the listeners when drawer opens\r\n    // This way we can make sure that the listener is added as late as possible\r\n    // This will make sure that our handler will run first when back button is pressed\r\n    const subscription = BackHandler.addEventListener(\r\n      'hardwareBackPress',\r\n      handleHardwareBack\r\n    );\r\n\r\n    if (Platform.OS === 'web') {\r\n      document?.body?.addEventListener?.('keyup', handleEscape);\r\n    }\r\n\r\n    return () => {\r\n      subscription.remove();\r\n\r\n      if (Platform.OS === 'web') {\r\n        document?.body?.removeEventListener?.('keyup', handleEscape);\r\n      }\r\n    };\r\n  }, [\r\n    defaultStatus,\r\n    drawerStatus,\r\n    drawerType,\r\n    handleDrawerClose,\r\n    handleDrawerOpen,\r\n    navigation,\r\n  ]);\r\n\r\n  const renderDrawerContent = () => {\r\n    return (\r\n      <DrawerPositionContext.Provider value={drawerPosition}>\r\n        {drawerContent({\r\n          state: state,\r\n          navigation: navigation,\r\n          descriptors: descriptors,\r\n        })}\r\n      </DrawerPositionContext.Provider>\r\n    );\r\n  };\r\n\r\n  const renderSceneContent = () => {\r\n    return (\r\n      <MaybeScreenContainer\r\n        enabled={detachInactiveScreens}\r\n        hasTwoStates\r\n        style={styles.content}\r\n      >\r\n        {state.routes.map((route, index) => {\r\n          const descriptor = descriptors[route.key];\r\n          const { lazy = true, unmountOnBlur } = descriptor.options;\r\n          const isFocused = state.index === index;\r\n\r\n          if (unmountOnBlur && !isFocused) {\r\n            return null;\r\n          }\r\n\r\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\r\n            // Don't render a lazy screen if we've never navigated to it\r\n            return null;\r\n          }\r\n\r\n          const {\r\n            header = ({ layout, options }: DrawerHeaderProps) => (\r\n              <Header\r\n                {...options}\r\n                layout={layout}\r\n                title={getHeaderTitle(options, route.name)}\r\n                headerLeft={\r\n                  options.headerLeft ??\r\n                  ((props) => <DrawerToggleButton {...props} />)\r\n                }\r\n              />\r\n            ),\r\n            sceneContainerStyle,\r\n          } = descriptor.options;\r\n\r\n          return (\r\n            <MaybeScreen\r\n              key={route.key}\r\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\r\n              visible={isFocused}\r\n              enabled={detachInactiveScreens}\r\n            >\r\n              <Screen\r\n                focused={isFocused}\r\n                route={descriptor.route}\r\n                navigation={descriptor.navigation}\r\n                headerShown={descriptor.options.headerShown}\r\n                headerTransparent={descriptor.options.headerTransparent}\r\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\r\n                header={header({\r\n                  layout: dimensions,\r\n                  route: descriptor.route,\r\n                  navigation:\r\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\r\n                  options: descriptor.options,\r\n                })}\r\n                style={sceneContainerStyle}\r\n              >\r\n                {descriptor.render()}\r\n              </Screen>\r\n            </MaybeScreen>\r\n          );\r\n        })}\r\n      </MaybeScreenContainer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <DrawerStatusContext.Provider value={drawerStatus}>\r\n      <Drawer\r\n        open={drawerStatus !== 'closed'}\r\n        onOpen={handleDrawerOpen}\r\n        onClose={handleDrawerClose}\r\n        gestureHandlerProps={gestureHandlerProps}\r\n        swipeEnabled={swipeEnabled}\r\n        swipeEdgeWidth={swipeEdgeWidth}\r\n        swipeVelocityThreshold={500}\r\n        swipeDistanceThreshold={swipeMinDistance}\r\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\r\n        statusBarAnimation={drawerStatusBarAnimation}\r\n        keyboardDismissMode={keyboardDismissMode}\r\n        drawerType={drawerType}\r\n        drawerPosition={drawerPosition}\r\n        drawerStyle={[\r\n          {\r\n            width: getDefaultDrawerWidth(dimensions),\r\n            backgroundColor: colors.card,\r\n          },\r\n          drawerType === 'permanent' &&\r\n            (drawerPosition === 'left'\r\n              ? {\r\n                  borderRightColor: colors.border,\r\n                  borderRightWidth: StyleSheet.hairlineWidth,\r\n                }\r\n              : {\r\n                  borderLeftColor: colors.border,\r\n                  borderLeftWidth: StyleSheet.hairlineWidth,\r\n                }),\r\n          drawerStyle,\r\n        ]}\r\n        overlayStyle={{ backgroundColor: overlayColor }}\r\n        renderDrawerContent={renderDrawerContent}\r\n        renderSceneContent={renderSceneContent}\r\n        dimensions={dimensions}\r\n      />\r\n    </DrawerStatusContext.Provider>\r\n  );\r\n}\r\n\r\nexport default function DrawerView({ navigation, ...rest }: Props) {\r\n  return (\r\n    <SafeAreaProviderCompat>\r\n      <GestureHandlerWrapper style={styles.content}>\r\n        <DrawerViewBase navigation={navigation} {...rest} />\r\n      </GestureHandlerWrapper>\r\n    </SafeAreaProviderCompat>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  content: {\r\n    flex: 1,\r\n  },\r\n});\r\n"]}