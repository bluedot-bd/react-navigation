{"version":3,"sources":["Drawer.tsx"],"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","Component","interactionHandle","undefined","clearInteractionHandle","createInteractionHandle","drawerStyle","dimensions","props","width","flatten","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBarOnOpen","hideStatusBar","statusBarAnimation","isStatusBarHidden","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","right","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","flexDirection","content","transform","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  I18nManager,\r\n  InteractionManager,\r\n  Keyboard,\r\n  LayoutChangeEvent,\r\n  Platform,\r\n  StatusBar,\r\n  StyleSheet,\r\n  View,\r\n} from 'react-native';\r\nimport Animated from 'react-native-reanimated';\r\n\r\nimport type { DrawerProps } from '../../types';\r\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\r\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\r\nimport Overlay from './Overlay';\r\n\r\nconst {\r\n  Clock,\r\n  Value,\r\n  onChange,\r\n  clockRunning,\r\n  startClock,\r\n  stopClock,\r\n  spring,\r\n  abs,\r\n  add,\r\n  and,\r\n  block,\r\n  call,\r\n  cond,\r\n  divide,\r\n  eq,\r\n  event,\r\n  greaterThan,\r\n  lessThan,\r\n  max,\r\n  min,\r\n  multiply,\r\n  neq,\r\n  or,\r\n  set,\r\n  sub,\r\n} = Animated;\r\n\r\nconst TRUE = 1;\r\nconst FALSE = 0;\r\nconst NOOP = 0;\r\nconst UNSET = -1;\r\n\r\nconst DIRECTION_LEFT = 1;\r\nconst DIRECTION_RIGHT = -1;\r\n\r\nconst SWIPE_DISTANCE_MINIMUM = 5;\r\n\r\nconst DEFAULT_DRAWER_WIDTH = '80%';\r\n\r\nconst SPRING_CONFIG = {\r\n  stiffness: 1000,\r\n  damping: 500,\r\n  mass: 3,\r\n  overshootClamping: true,\r\n  restDisplacementThreshold: 0.01,\r\n  restSpeedThreshold: 0.01,\r\n};\r\n\r\nconst ANIMATED_ZERO = new Animated.Value(0);\r\nconst ANIMATED_ONE = new Animated.Value(1);\r\n\r\ntype Binary = 0 | 1;\r\n\r\nexport default class DrawerView extends React.Component<DrawerProps> {\r\n  componentDidUpdate(prevProps: DrawerProps) {\r\n    const {\r\n      open,\r\n      drawerPosition,\r\n      drawerType,\r\n      swipeDistanceThreshold,\r\n      swipeVelocityThreshold,\r\n      hideStatusBarOnOpen: hideStatusBar,\r\n    } = this.props;\r\n\r\n    if (\r\n      // If we're not in the middle of a transition, sync the drawer's open state\r\n      typeof this.pendingOpenValue !== 'boolean' ||\r\n      open !== this.pendingOpenValue\r\n    ) {\r\n      this.toggleDrawer(open);\r\n    }\r\n\r\n    this.pendingOpenValue = undefined;\r\n\r\n    if (open !== prevProps.open && hideStatusBar) {\r\n      this.toggleStatusBar(open);\r\n    }\r\n\r\n    if (prevProps.drawerPosition !== drawerPosition) {\r\n      this.drawerPosition.setValue(\r\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\r\n      );\r\n    }\r\n\r\n    if (prevProps.drawerType !== drawerType) {\r\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\r\n    }\r\n\r\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\r\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\r\n    }\r\n\r\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\r\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.toggleStatusBar(false);\r\n    this.handleEndInteraction();\r\n  }\r\n\r\n  private handleEndInteraction = () => {\r\n    if (this.interactionHandle !== undefined) {\r\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\r\n      this.interactionHandle = undefined;\r\n    }\r\n  };\r\n\r\n  private handleStartInteraction = () => {\r\n    if (this.interactionHandle === undefined) {\r\n      this.interactionHandle = InteractionManager.createInteractionHandle();\r\n    }\r\n  };\r\n\r\n  private getDrawerWidth = (): number => {\r\n    const { drawerStyle, dimensions } = this.props;\r\n    const { width = DEFAULT_DRAWER_WIDTH } =\r\n      StyleSheet.flatten(drawerStyle) || {};\r\n\r\n    if (typeof width === 'string' && width.endsWith('%')) {\r\n      // Try to calculate width if a percentage is given\r\n      const percentage = Number(width.replace(/%$/, ''));\r\n\r\n      if (Number.isFinite(percentage)) {\r\n        return dimensions.width * (percentage / 100);\r\n      }\r\n    }\r\n\r\n    return typeof width === 'number' ? width : 0;\r\n  };\r\n\r\n  private clock = new Clock();\r\n  private interactionHandle: number | undefined;\r\n\r\n  private isDrawerTypeFront = new Value<Binary>(\r\n    this.props.drawerType === 'front' ? TRUE : FALSE\r\n  );\r\n\r\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\r\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\r\n  private isSwiping = new Value<Binary>(FALSE);\r\n\r\n  private initialDrawerWidth = this.getDrawerWidth();\r\n\r\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\r\n  private touchX = new Value<number>(0);\r\n  private velocityX = new Value<number>(0);\r\n  private gestureX = new Value<number>(0);\r\n  private offsetX = new Value<number>(0);\r\n  private position = new Value<number>(\r\n    this.props.open\r\n      ? this.initialDrawerWidth *\r\n        (this.props.drawerPosition === 'right'\r\n          ? DIRECTION_RIGHT\r\n          : DIRECTION_LEFT)\r\n      : 0\r\n  );\r\n\r\n  private containerWidth = new Value<number>(this.props.dimensions.width);\r\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\r\n  private drawerOpacity = new Value<number>(\r\n    this.props.drawerType === 'permanent' ? 1 : 0\r\n  );\r\n  private drawerPosition = new Value<number>(\r\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\r\n  );\r\n\r\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\r\n  //\r\n  // While closing the drawer when user starts gesture outside of its area (in greyed\r\n  // out part of the window), we want the drawer to follow only once finger reaches the\r\n  // edge of the drawer.\r\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\r\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\r\n  // an arrow pointing left\r\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    +---------------+    +---------------+    +---------------+    +---------------+\r\n  //\r\n  // For the above to work properly we define animated value that will keep start position\r\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\r\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\r\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\r\n  // drawer be pulled back as soon as you start the pan.\r\n  //\r\n  // This is used only when drawerType is \"front\"\r\n  private touchDistanceFromDrawer = cond(\r\n    this.isDrawerTypeFront,\r\n    cond(\r\n      eq(this.drawerPosition, DIRECTION_LEFT),\r\n      max(\r\n        // Distance of touch start from left screen edge - Drawer width\r\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\r\n        0\r\n      ),\r\n      min(\r\n        multiply(\r\n          // Distance of drawer from left screen edge - Touch start point\r\n          sub(\r\n            sub(this.containerWidth, this.drawerWidth),\r\n            sub(this.touchX, this.gestureX)\r\n          ),\r\n          DIRECTION_RIGHT\r\n        ),\r\n        0\r\n      )\r\n    ),\r\n    0\r\n  );\r\n\r\n  private swipeDistanceThreshold = new Value<number>(\r\n    this.props.swipeDistanceThreshold\r\n  );\r\n  private swipeVelocityThreshold = new Value<number>(\r\n    this.props.swipeVelocityThreshold\r\n  );\r\n\r\n  private currentOpenValue: boolean = this.props.open;\r\n  private pendingOpenValue: boolean | undefined;\r\n\r\n  private isStatusBarHidden: boolean = false;\r\n\r\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\r\n\r\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\r\n    const toValue = new Value(0);\r\n    const frameTime = new Value(0);\r\n\r\n    const state = {\r\n      position: this.position,\r\n      time: new Value(0),\r\n      finished: new Value(FALSE),\r\n      velocity: new Value(0),\r\n    };\r\n\r\n    return block([\r\n      cond(clockRunning(this.clock), NOOP, [\r\n        // Animation wasn't running before\r\n        // Set the initial values and start the clock\r\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\r\n        set(frameTime, 0),\r\n        set(state.time, 0),\r\n        set(state.finished, FALSE),\r\n        set(state.velocity, this.velocityX),\r\n        set(this.isOpen, isOpen),\r\n        startClock(this.clock),\r\n        call([], this.handleStartInteraction),\r\n        set(this.manuallyTriggerSpring, FALSE),\r\n      ]),\r\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\r\n      cond(state.finished, [\r\n        // Reset gesture and velocity from previous gesture\r\n        set(this.touchX, 0),\r\n        set(this.gestureX, 0),\r\n        set(this.velocityX, 0),\r\n        set(this.offsetX, 0),\r\n        // When the animation finishes, stop the clock\r\n        stopClock(this.clock),\r\n        call([this.isOpen], ([value]: readonly Binary[]) => {\r\n          const open = Boolean(value);\r\n          this.handleEndInteraction();\r\n\r\n          if (open !== this.props.open) {\r\n            // Sync drawer's state after animation finished\r\n            // This shouldn't be necessary, but there seems to be an issue on iOS\r\n            this.toggleDrawer(this.props.open);\r\n          }\r\n        }),\r\n      ]),\r\n    ]);\r\n  };\r\n\r\n  private dragX = block([\r\n    onChange(\r\n      this.isOpen,\r\n      call([this.isOpen], ([value]: readonly Binary[]) => {\r\n        const open = Boolean(value);\r\n\r\n        this.currentOpenValue = open;\r\n\r\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\r\n        if (open !== this.props.open) {\r\n          // If the mode changed, update state\r\n          if (open) {\r\n            this.props.onOpen();\r\n          } else {\r\n            this.props.onClose();\r\n          }\r\n\r\n          this.pendingOpenValue = open;\r\n\r\n          // Force componentDidUpdate to fire, whether user does a setState or not\r\n          // This allows us to detect when the user drops the update and revert back\r\n          // It's necessary to make sure that the state stays in sync\r\n          this.forceUpdate();\r\n        }\r\n      })\r\n    ),\r\n    onChange(\r\n      this.nextIsOpen,\r\n      cond(neq(this.nextIsOpen, UNSET), [\r\n        // Stop any running animations\r\n        cond(clockRunning(this.clock), stopClock(this.clock)),\r\n        // Update the open value to trigger the transition\r\n        set(this.isOpen, this.nextIsOpen),\r\n        set(this.gestureX, 0),\r\n        set(this.nextIsOpen, UNSET),\r\n      ])\r\n    ),\r\n    // This block must be after the this.isOpen listener since we check for current value\r\n    onChange(\r\n      this.isSwiping,\r\n      // Listen to updates for this value only when it changes\r\n      // Without `onChange`, this will fire even if the value didn't change\r\n      // We don't want to call the listeners if the value didn't change\r\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\r\n        const { keyboardDismissMode } = this.props;\r\n\r\n        if (value === TRUE) {\r\n          if (keyboardDismissMode === 'on-drag') {\r\n            Keyboard.dismiss();\r\n          }\r\n\r\n          this.toggleStatusBar(true);\r\n        } else {\r\n          this.toggleStatusBar(this.currentOpenValue);\r\n        }\r\n      })\r\n    ),\r\n    onChange(\r\n      this.gestureState,\r\n      cond(\r\n        eq(this.gestureState, GestureState.ACTIVE),\r\n        call([], this.handleStartInteraction)\r\n      )\r\n    ),\r\n    cond(\r\n      eq(this.gestureState, GestureState.ACTIVE),\r\n      [\r\n        cond(this.isSwiping, NOOP, [\r\n          // We weren't dragging before, set it to true\r\n          set(this.isSwiping, TRUE),\r\n          // Also update the drag offset to the last position\r\n          set(this.offsetX, this.position),\r\n        ]),\r\n        // Update position with previous offset + gesture distance\r\n        set(\r\n          this.position,\r\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\r\n        ),\r\n        // Stop animations while we're dragging\r\n        stopClock(this.clock),\r\n      ],\r\n      [\r\n        set(this.isSwiping, FALSE),\r\n        set(this.touchX, 0),\r\n        this.transitionTo(\r\n          cond(\r\n            this.manuallyTriggerSpring,\r\n            this.isOpen,\r\n            cond(\r\n              or(\r\n                and(\r\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\r\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\r\n                ),\r\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\r\n              ),\r\n              cond(\r\n                eq(this.drawerPosition, DIRECTION_LEFT),\r\n                // If swiped to right, open the drawer, otherwise close it\r\n                greaterThan(\r\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\r\n                  0\r\n                ),\r\n                // If swiped to left, open the drawer, otherwise close it\r\n                lessThan(\r\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\r\n                  0\r\n                )\r\n              ),\r\n              this.isOpen\r\n            )\r\n          )\r\n        ),\r\n      ]\r\n    ),\r\n    this.position,\r\n  ]);\r\n\r\n  private translateX = cond(\r\n    eq(this.drawerPosition, DIRECTION_RIGHT),\r\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\r\n    max(min(this.drawerWidth, this.dragX), 0)\r\n  );\r\n\r\n  private progress = cond(\r\n    // Check if the drawer width is available to avoid division by zero\r\n    eq(this.drawerWidth, 0),\r\n    0,\r\n    abs(divide(this.translateX, this.drawerWidth))\r\n  );\r\n\r\n  private handleGestureEvent = event([\r\n    {\r\n      nativeEvent: {\r\n        x: this.touchX,\r\n        translationX: this.gestureX,\r\n        velocityX: this.velocityX,\r\n      },\r\n    },\r\n  ]);\r\n\r\n  private handleGestureStateChange = event([\r\n    {\r\n      nativeEvent: {\r\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\r\n      },\r\n    },\r\n  ]);\r\n\r\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\r\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\r\n\r\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\r\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\r\n    this.toggleDrawer(this.props.open);\r\n\r\n    // Until layout is available, drawer is hidden with opacity: 0 by default\r\n    // Show it in the next frame when layout is available\r\n    // If we don't delay it until the next frame, there's a visible flicker\r\n    requestAnimationFrame(() =>\r\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\r\n    );\r\n  };\r\n\r\n  private toggleDrawer = (open: boolean) => {\r\n    if (this.currentOpenValue !== open) {\r\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\r\n\r\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\r\n      // However, there's a race condition on Android, so we need to set a bit earlier\r\n      this.currentOpenValue = open;\r\n    }\r\n  };\r\n\r\n  private toggleStatusBar = (hidden: boolean) => {\r\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\r\n      this.props;\r\n\r\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\r\n      this.isStatusBarHidden = hidden;\r\n      StatusBar.setHidden(hidden, statusBarAnimation);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      open,\r\n      swipeEnabled,\r\n      drawerPosition,\r\n      drawerType,\r\n      swipeEdgeWidth,\r\n      drawerStyle,\r\n      overlayStyle,\r\n      renderDrawerContent,\r\n      renderSceneContent,\r\n      gestureHandlerProps,\r\n    } = this.props;\r\n\r\n    const isOpen = drawerType === 'permanent' ? true : open;\r\n    const isRight = drawerPosition === 'right';\r\n\r\n    const contentTranslateX =\r\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\r\n\r\n    const drawerTranslateX =\r\n      drawerType === 'back'\r\n        ? I18nManager.isRTL\r\n          ? multiply(\r\n              sub(this.containerWidth, this.drawerWidth),\r\n              isRight ? 1 : -1\r\n            )\r\n          : ANIMATED_ZERO\r\n        : this.translateX;\r\n\r\n    const offset =\r\n      drawerType === 'back'\r\n        ? 0\r\n        : I18nManager.isRTL\r\n        ? '100%'\r\n        : multiply(this.drawerWidth, -1);\r\n\r\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\r\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\r\n    const hitSlop = isRight\r\n      ? // Extend hitSlop to the side of the screen when drawer is closed\r\n        // This lets the user drag the drawer from the side of the screen\r\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\r\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\r\n\r\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\r\n\r\n    return (\r\n      <DrawerProgressContext.Provider value={progress}>\r\n        <PanGestureHandler\r\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\r\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\r\n          onGestureEvent={this.handleGestureEvent}\r\n          onHandlerStateChange={this.handleGestureStateChange}\r\n          hitSlop={hitSlop}\r\n          enabled={drawerType !== 'permanent' && swipeEnabled}\r\n          {...gestureHandlerProps}\r\n        >\r\n          <Animated.View\r\n            onLayout={this.handleContainerLayout}\r\n            style={[\r\n              styles.main,\r\n              {\r\n                flexDirection:\r\n                  drawerType === 'permanent' && !isRight\r\n                    ? 'row-reverse'\r\n                    : 'row',\r\n              },\r\n            ]}\r\n          >\r\n            <Animated.View\r\n              style={[\r\n                styles.content,\r\n                {\r\n                  transform:\r\n                    drawerType === 'permanent'\r\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\r\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\r\n                        []\r\n                      : [{ translateX: contentTranslateX }],\r\n                },\r\n              ]}\r\n            >\r\n              <View\r\n                accessibilityElementsHidden={\r\n                  isOpen && drawerType !== 'permanent'\r\n                }\r\n                importantForAccessibility={\r\n                  isOpen && drawerType !== 'permanent'\r\n                    ? 'no-hide-descendants'\r\n                    : 'auto'\r\n                }\r\n                style={styles.content}\r\n              >\r\n                {renderSceneContent()}\r\n              </View>\r\n              {\r\n                // Disable overlay if sidebar is permanent\r\n                drawerType === 'permanent' ? null : (\r\n                  <Overlay\r\n                    progress={progress}\r\n                    onPress={() => this.toggleDrawer(false)}\r\n                    style={overlayStyle as any}\r\n                    accessibilityElementsHidden={!isOpen}\r\n                    importantForAccessibility={\r\n                      isOpen ? 'auto' : 'no-hide-descendants'\r\n                    }\r\n                  />\r\n                )\r\n              }\r\n            </Animated.View>\r\n            <Animated.Code\r\n              // This is needed to make sure that container width updates with `setValue`\r\n              // Without this, it won't update when not used in styles\r\n              exec={this.containerWidth}\r\n            />\r\n            {drawerType === 'permanent' ? null : (\r\n              <Animated.Code\r\n                exec={block([\r\n                  onChange(this.manuallyTriggerSpring, [\r\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\r\n                      set(this.nextIsOpen, FALSE),\r\n                      call([], () => (this.currentOpenValue = false)),\r\n                    ]),\r\n                  ]),\r\n                ])}\r\n              />\r\n            )}\r\n            <Animated.View\r\n              accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\r\n              removeClippedSubviews={Platform.OS !== 'ios'}\r\n              onLayout={this.handleDrawerLayout}\r\n              style={[\r\n                styles.container,\r\n                {\r\n                  transform:\r\n                    drawerType === 'permanent'\r\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\r\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\r\n                        []\r\n                      : [{ translateX: drawerTranslateX }],\r\n                  opacity: this.drawerOpacity,\r\n                },\r\n                drawerType === 'permanent'\r\n                  ? // Without this, the `left`/`right` values don't get reset\r\n                    isRight\r\n                    ? { right: 0 }\r\n                    : { left: 0 }\r\n                  : [\r\n                      styles.nonPermanent,\r\n                      isRight ? { right: offset } : { left: offset },\r\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\r\n                    ],\r\n                drawerStyle as any,\r\n              ]}\r\n            >\r\n              {renderDrawerContent()}\r\n            </Animated.View>\r\n          </Animated.View>\r\n        </PanGestureHandler>\r\n      </DrawerProgressContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: 'white',\r\n    maxWidth: '100%',\r\n  },\r\n  nonPermanent: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    bottom: 0,\r\n    width: DEFAULT_DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    ...Platform.select({\r\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\r\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\r\n      web: null,\r\n      default: { overflow: 'hidden' },\r\n    }),\r\n  },\r\n});\r\n"]}