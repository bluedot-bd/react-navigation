{"version":3,"sources":["DrawerItemList.tsx"],"names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","closeDrawer","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","undefined","params"],"mappings":"AAAA,SACEA,aADF,EAEEC,aAFF,EAKEC,cALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,UAAP,MAAuB,cAAvB;;AAQA;AACA;AACA;AACA,eAAe,SAASC,cAAT,OAIL;AAAA,MAJ6B;AACrCC,IAAAA,KADqC;AAErCC,IAAAA,UAFqC;AAGrCC,IAAAA;AAHqC,GAI7B;AACR,QAAMC,SAAS,GAAGP,cAAc,EAAhC;AAEA,QAAMQ,YAAY,GAAGJ,KAAK,CAACK,MAAN,CAAaL,KAAK,CAACM,KAAnB,CAArB;AACA,QAAMC,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAd,CAArC;AACA,QAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;AAEA,QAAM;AACJC,IAAAA,qBADI;AAEJC,IAAAA,uBAFI;AAGJC,IAAAA,2BAHI;AAIJC,IAAAA;AAJI,MAKFL,cALJ;AAOA,SAAOT,KAAK,CAACK,MAAN,CAAaU,GAAb,CAAiB,CAACC,KAAD,EAAQC,CAAR,KAAc;AACpC,UAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAA5B;;AAEA,UAAMa,OAAO,GAAG,MAAM;AACpB,YAAMC,KAAK,GAAGnB,UAAU,CAACoB,IAAX,CAAgB;AAC5BC,QAAAA,IAAI,EAAE,iBADsB;AAE5BC,QAAAA,MAAM,EAAEP,KAAK,CAACR,GAFc;AAG5BgB,QAAAA,iBAAiB,EAAE;AAHS,OAAhB,CAAd;;AAMA,UAAI,CAACJ,KAAK,CAACK,gBAAX,EAA6B;AAC3BxB,QAAAA,UAAU,CAACyB,QAAX,CAAoB,EAClB,IAAIR,OAAO,GACPvB,aAAa,CAACgC,WAAd,EADO,GAEPjC,aAAa,CAACkC,QAAd,CAAuB;AAAEC,YAAAA,IAAI,EAAEb,KAAK,CAACa,IAAd;AAAoBC,YAAAA,KAAK,EAAE;AAA3B,WAAvB,CAFJ,CADkB;AAIlBP,UAAAA,MAAM,EAAEvB,KAAK,CAACQ;AAJI,SAApB;AAMD;AACF,KAfD;;AAiBA,UAAM;AACJuB,MAAAA,KADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,gBAJI;AAKJC,MAAAA,eALI;AAMJC,MAAAA;AANI,QAOFlC,WAAW,CAACc,KAAK,CAACR,GAAP,CAAX,CAAuBE,OAP3B;AASA,wBACE,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEM,KAAK,CAACR,GADb;AAEE,MAAA,KAAK,EACHwB,WAAW,KAAKK,SAAhB,GACIL,WADJ,GAEID,KAAK,KAAKM,SAAV,GACAN,KADA,GAEAf,KAAK,CAACa,IAPd;AASE,MAAA,IAAI,EAAEI,UATR;AAUE,MAAA,OAAO,EAAEf,OAVX;AAWE,MAAA,eAAe,EAAEP,qBAXnB;AAYE,MAAA,iBAAiB,EAAEC,uBAZrB;AAaE,MAAA,qBAAqB,EAAEC,2BAbzB;AAcE,MAAA,uBAAuB,EAAEC,6BAd3B;AAeE,MAAA,gBAAgB,EAAEsB,sBAfpB;AAgBE,MAAA,UAAU,EAAEF,gBAhBd;AAiBE,MAAA,KAAK,EAAEC,eAjBT;AAkBE,MAAA,EAAE,EAAEhC,SAAS,CAACa,KAAK,CAACa,IAAP,EAAab,KAAK,CAACsB,MAAnB,CAlBf;AAmBE,MAAA,OAAO,EAAEnB;AAnBX,MADF;AAuBD,GApDM,CAAP;AAqDD","sourcesContent":["import {\r\n  CommonActions,\r\n  DrawerActions,\r\n  DrawerNavigationState,\r\n  ParamListBase,\r\n  useLinkBuilder,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\n\r\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\r\nimport DrawerItem from './DrawerItem';\r\n\r\ntype Props = {\r\n  state: DrawerNavigationState<ParamListBase>;\r\n  navigation: DrawerNavigationHelpers;\r\n  descriptors: DrawerDescriptorMap;\r\n};\r\n\r\n/**\r\n * Component that renders the navigation list in the drawer.\r\n */\r\nexport default function DrawerItemList({\r\n  state,\r\n  navigation,\r\n  descriptors,\r\n}: Props) {\r\n  const buildLink = useLinkBuilder();\r\n\r\n  const focusedRoute = state.routes[state.index];\r\n  const focusedDescriptor = descriptors[focusedRoute.key];\r\n  const focusedOptions = focusedDescriptor.options;\r\n\r\n  const {\r\n    drawerActiveTintColor,\r\n    drawerInactiveTintColor,\r\n    drawerActiveBackgroundColor,\r\n    drawerInactiveBackgroundColor,\r\n  } = focusedOptions;\r\n\r\n  return state.routes.map((route, i) => {\r\n    const focused = i === state.index;\r\n\r\n    const onPress = () => {\r\n      const event = navigation.emit({\r\n        type: 'drawerItemPress',\r\n        target: route.key,\r\n        canPreventDefault: true,\r\n      });\r\n\r\n      if (!event.defaultPrevented) {\r\n        navigation.dispatch({\r\n          ...(focused\r\n            ? DrawerActions.closeDrawer()\r\n            : CommonActions.navigate({ name: route.name, merge: true })),\r\n          target: state.key,\r\n        });\r\n      }\r\n    };\r\n\r\n    const {\r\n      title,\r\n      drawerLabel,\r\n      drawerIcon,\r\n      drawerLabelStyle,\r\n      drawerItemStyle,\r\n      drawerAllowFontScaling,\r\n    } = descriptors[route.key].options;\r\n\r\n    return (\r\n      <DrawerItem\r\n        key={route.key}\r\n        label={\r\n          drawerLabel !== undefined\r\n            ? drawerLabel\r\n            : title !== undefined\r\n            ? title\r\n            : route.name\r\n        }\r\n        icon={drawerIcon}\r\n        focused={focused}\r\n        activeTintColor={drawerActiveTintColor}\r\n        inactiveTintColor={drawerInactiveTintColor}\r\n        activeBackgroundColor={drawerActiveBackgroundColor}\r\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\r\n        allowFontScaling={drawerAllowFontScaling}\r\n        labelStyle={drawerLabelStyle}\r\n        style={drawerItemStyle}\r\n        to={buildLink(route.name, route.params)}\r\n        onPress={onPress}\r\n      />\r\n    );\r\n  }) as React.ReactNode as React.ReactElement;\r\n}\r\n"]}